// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace finenako_service_tests.Controllers
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Retrieve single lease offer")]
    public partial class RetrieveSingleLeaseOfferFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "RetrieveSingleLeaseOffer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Controllers", "Retrieve single lease offer", "\tIn order to have a full details of a lease offer\n\tI want to call the GET api wit" +
                    "h my Offer ID", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "LocalisationId",
                        "Type",
                        "HierarchyId",
                        "Name"});
            table42.AddRow(new string[] {
                        "1",
                        "CIT",
                        "",
                        "City1"});
            table42.AddRow(new string[] {
                        "2",
                        "ARE",
                        "1",
                        "Area1"});
            table42.AddRow(new string[] {
                        "3",
                        "ARE",
                        "1",
                        "Area2"});
#line 6
 testRunner.Given("The following list of localisations is present in the system", ((string)(null)), table42, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve single lease offer with invalid id")]
        public void RetrieveSingleLeaseOfferWithInvalidId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve single lease offer with invalid id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 13
 testRunner.Given("Whatever data I have in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.When("I make a GET request on lease-offers endpoint with offer id : \'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("The response Status code should be \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve single lease offer with a not existing lease offer id")]
        public void RetrieveSingleLeaseOfferWithANotExistingLeaseOfferId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve single lease offer with a not existing lease offer id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "LeaseOfferID",
                            "LocalisationId",
                            "Title",
                            "Surface",
                            "Rooms",
                            "MonthlyRent",
                            "Creationdate",
                            "ConcatenedPhotos"});
                table43.AddRow(new string[] {
                            "1",
                            "2",
                            "Offer number 1",
                            "18",
                            "3",
                            "800",
                            "2023-09-25",
                            "image1.jpg;image2.jpg"});
#line 18
 testRunner.Given("The following list of lease offer is present in the system", ((string)(null)), table43, "Given ");
#line hidden
#line 21
 testRunner.When("I make a GET request on lease-offers endpoint with offer id : \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("The response Status code should be \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve single lease offer with an existing lease offer id")]
        public void RetrieveSingleLeaseOfferWithAnExistingLeaseOfferId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve single lease offer with an existing lease offer id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "LeaseOfferID",
                            "LocalisationId",
                            "Title",
                            "Surface",
                            "Rooms",
                            "MonthlyRent",
                            "Description",
                            "Creationdate",
                            "ConcatenedPhotos"});
                table44.AddRow(new string[] {
                            "1",
                            "2",
                            "Offer number 1",
                            "18",
                            "3",
                            "800",
                            "Description 1",
                            "2023-09-25",
                            "image1.jpg;image2.jpg"});
                table44.AddRow(new string[] {
                            "2",
                            "2",
                            "Offer number 2",
                            "40",
                            "1",
                            "900",
                            "Description 2",
                            "2023-10-25",
                            "image3.jpg;"});
#line 25
 testRunner.Given("The following list of lease offer is present in the system", ((string)(null)), table44, "Given ");
#line hidden
#line 29
 testRunner.When("I make a GET request on lease-offers endpoint with offer id : \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("The response Status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "LeaseOfferID",
                            "Loc.Id",
                            "Loc.Type",
                            "Loc.Name",
                            "Loc.Hier.Id",
                            "Loc.Hier.Type",
                            "Loc.Hier.Name",
                            "Title",
                            "Surface",
                            "Rooms",
                            "MonthlyRent",
                            "Description",
                            "Creationdate",
                            "PhotoUris"});
                table45.AddRow(new string[] {
                            "2",
                            "2",
                            "ARE",
                            "Area1",
                            "1",
                            "CIT",
                            "City1",
                            "Offer number 2",
                            "40",
                            "1",
                            "900",
                            "Description 2",
                            "2023-10-25",
                            "http://localhost:7182/Photos/image3.jpg"});
#line 31
 testRunner.And("The body content should be like :", ((string)(null)), table45, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
